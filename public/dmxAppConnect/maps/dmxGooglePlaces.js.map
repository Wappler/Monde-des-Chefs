{"version":3,"sources":["components/googleAutocomplete.js","components/googlePlacesSearch.js"],"names":["dmx","Component","extends","initialData","placeId","address","phone","phone2","latitude","longitude","icon","name","priceLevel","rating","types","url","utcOffset","vicinity","website","attributes","map","type","String","default","country","strict-bounds","Boolean","move-map","render","node","BaseComponent","prototype","call","this","$node","value","props","disabled","defaultValue","set","target","document","getElementById","dmxComponent","autocomplete","google","maps","places","Autocomplete","strictBounds","split","bindTo","setComponentRestrictions","addListener","onchange","bind","update","setOptions","place","getPlace","place_id","formatted_address","formatted_phone_number","international_phone_number","geometry","location","lat","lng","attributions","html_attributions","isOpen","opening_hours","price_level","userRatingsTotal","user_ratings_total","utc_offset_minutes","adrAddress","adr_address","components","Array","isArray","address_components","reduce","output","component","forEach","replace","m","c","toUpperCase","long","long_name","short","short_name","viewport","fitBounds","setCenter","setZoom","setTimeout","dispatchEvent","results","hasMore","status","fields","show-on-map","methods","findPlaceFromQuery","params","request","clearMarkers","query","bindBounds","locationBias","getBounds","radius","center","PlacesService","onresults","findPlaceFromPhoneNumber","phoneNumber","nearby","bounds","keyword","openNow","nearbySearch","search","textSearch","getMore","pagination","hasNextPage","nextPage","markers","marker","setMap","image","size","Size","origin","Point","anchor","scaledSize","Marker","title","position","push","console","warn"],"mappings":"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","file":"../dmxGooglePlaces/dmxGooglePlaces.js","sourcesContent":["dmx.Component('google-autocomplete', {\r\n\r\n    extends: 'input',\r\n\r\n    initialData:{\r\n        placeId: null,\r\n        address: null,\r\n        phone: null,\r\n        phone2: null,\r\n        latitude: null,\r\n        longitude: null,\r\n        icon: null,\r\n        name: null,\r\n        priceLevel: null,\r\n        rating: null,\r\n        types: null,\r\n        url: null,\r\n        utcOffset: null, // in minutes\r\n        vicinity: null,\r\n        website: null\r\n    },\r\n\r\n    attributes: {\r\n        map: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        country: { // restrict to country (ISO 3166-1 Alpha-2 country code) (up to 5 max, separate with comma)\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        types: {\r\n            type: String,\r\n            default: null // geocode, address, establishment, (regions), (cities)\r\n        },\r\n\r\n        'strict-bounds': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'move-map': {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        dmx.BaseComponent.prototype.render.call(this, node);\r\n        this.$node.value = this.props.value;\r\n        this.$node.disabled = this.props.disabled;\r\n        this.$node.defaultValue = this.props.value;\r\n        this.set('value', this.props.value);\r\n        this.set('disabled', this.props.disabled);\r\n\r\n        this.target = document.getElementById(this.props.map);\r\n        this.map = this.target && this.target.dmxComponent && this.target.dmxComponent.map;\r\n\r\n        this.autocomplete = new google.maps.places.Autocomplete(this.$node, {\r\n            strictBounds: this.props['strict-bounds'],\r\n            types: this.props.types ? this.props.types.split(/\\s*,\\s*/) : [],\r\n        });\r\n\r\n        if (this.map) {\r\n            this.autocomplete.bindTo('bounds', this.map);\r\n        }\r\n\r\n        if (this.props.country) {\r\n            this.autocomplete.setComponentRestrictions({country: this.props.country.split(/\\s*,\\s*/)});\r\n        }\r\n\r\n        this.autocomplete.addListener('place_changed', this.onchange.bind(this));\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.props.map && !this.map) {\r\n            this.map = this.target && this.target.dmxComponent && this.target.dmxComponent.map;\r\n            this.autocomplete.bindTo('bounds', this.map);\r\n        }\r\n\r\n        if (props['strict-bounds'] != this.props['strict-bounds']) {\r\n            this.autocomplete.setOptions({ strictBounds: this.props['strict-bounds'] });\r\n        }\r\n\r\n        if (props.types != this.props.types) {\r\n            this.autocomplete.setOptions({ types: this.props.types });\r\n        }\r\n\r\n        if (props.country != this.props.country) {\r\n            this.autocomplete.setComponentRestrictions({country: this.props.country ? this.props.country.split(/\\s*,\\s*/) : []});\r\n        }\r\n\r\n        if (props.disabled != this.props.disabled) {\r\n            this.$node.disabled = this.props.disabled;\r\n        }\r\n    },\r\n\r\n    onchange: function() {\r\n        var place = this.autocomplete.getPlace();\r\n        if (!place.place_id) return;\r\n\r\n        this.set('value', this.$node.value);\r\n        this.set({\r\n            placeId: place.place_id,\r\n            address: place.formatted_address,\r\n            phone: place.formatted_phone_number,\r\n            phone2: place.international_phone_number,\r\n            latitude: place.geometry && place.geometry.location.lat(),\r\n            longitude: place.geometry && place.geometry.location.lng(),\r\n            attributions: place.html_attributions,\r\n            icon: place.icon,\r\n            name: place.name,\r\n            isOpen: place.opening_hours && place.opening_hours.isOpen(),\r\n            priceLevel: place.price_level,\r\n            rating: place.rating,\r\n            types: place.types,\r\n            url: place.url,\r\n            userRatingsTotal: place.user_ratings_total,\r\n            utcOffset: place.utc_offset_minutes,\r\n            vicinity: place.vicinity,\r\n            website: place.website,\r\n            adrAddress: place.adr_address,\r\n            components: Array.isArray(place.address_components) ? place.address_components.reduce(function(output, component) {\r\n                component.types.forEach(function(type) {\r\n                    output[type.replace(/_(\\w)/g, function(m, c) { return c.toUpperCase() })] = {\r\n                        long: component.long_name,\r\n                        short: component.short_name\r\n                    }\r\n                });\r\n\r\n                return output;\r\n            }, {}) : null\r\n        });\r\n\r\n        if (this.props['move-map'] && this.map) {\r\n            if (place.geometry.viewport) {\r\n                this.map.fitBounds(place.geometry.viewport);\r\n            } else {\r\n                this.map.setCenter(place.geometry.location);\r\n                this.map.setZoom(17);\r\n            }\r\n        }\r\n\r\n        setTimeout(this.dispatchEvent.bind(this, 'updated'), 100);\r\n    }\r\n\r\n});\r\n","dmx.Component('google-places-search', {\r\n\r\n    initialData:{\r\n        results: [],\r\n        hasMore: false,\r\n        status: ''\r\n    },\r\n\r\n    attributes: {\r\n        map: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        fields: { // https://developers.google.com/maps/documentation/javascript/places#place_search_fields\r\n            type: [Array, String],\r\n            default: ['place_id', 'business_status', 'formatted_address', 'geometry', 'icon', 'name', 'type']\r\n        },\r\n\r\n        'show-on-map': {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        findPlaceFromQuery: function(params) {\r\n            var request = {};\r\n            var fields = params.fields || this.props.fields;\r\n            \r\n            this.clearMarkers();\r\n\r\n            request.query = params.query;\r\n            request.fields = Array.isArray(fields) ? fields : fields.split(/\\s*,\\s*/);\r\n\r\n            if (params.bindBounds) {\r\n                request.locationBias = this.map.getBounds();\r\n            } else {\r\n                if (params.latitude && params.longitude) {\r\n                    if (params.radius) {\r\n                        request.locationBias = {\r\n                            center: { lat: +params.latitude, lng: +params.longitude },\r\n                            radius: +params.radius\r\n                        };\r\n                     } else {\r\n                        request.locationBias = { lat: +params.latitude, lng: +params.longitude };\r\n                    }\r\n                }\r\n            }\r\n\r\n            var service = new google.maps.places.PlacesService(this.map);\r\n            service.findPlaceFromQuery(request, this.onresults.bind(this));\r\n        },\r\n\r\n        findPlaceFromPhoneNumber: function(params) {\r\n            var request = {};\r\n            var fields = params.fields || this.props.fields;\r\n\r\n            this.clearMarkers();\r\n            \r\n            request.phoneNumber = params.phoneNumber;\r\n            request.fields = Array.isArray(fields) ? fields : fields.split(/\\s*,\\s*/);\r\n\r\n            if (params.bindBounds) {\r\n                request.locationBias = this.map.getBounds();\r\n            } else {\r\n                if (params.latitude && params.longitude) {\r\n                    if (params.radius) {\r\n                        request.locationBias = {\r\n                            center: { lat: +params.latitude, lng: +params.longitude },\r\n                            radius: +params.radius\r\n                        };\r\n                     } else {\r\n                        request.locationBias = { lat: +params.latitude, lng: +params.longitude };\r\n                    }\r\n                }\r\n            }\r\n\r\n            var service = new google.maps.places.PlacesService(this.map);\r\n            service.findPlaceFromPhoneNumber(request, this.onresults.bind(this));\r\n        },\r\n\r\n        nearby: function(params) {\r\n            var request = {};\r\n\r\n            this.clearMarkers();\r\n\r\n            if (params.latitude != null && params.longitude != null) {\r\n                request.location = { lat: +params.latitude, lng: +params.longitude };\r\n                request.radius = +params.radius || 500;\r\n            } else {\r\n                request.bounds = this.map.getBounds();\r\n            }\r\n\r\n            if (params.keyword) {\r\n                request.keyword = params.keyword;\r\n            }\r\n\r\n            if (params.name) {\r\n                request.name = params.name;\r\n            }\r\n\r\n            if (params.openNow) {\r\n                request.openNow = params.openNow;\r\n            }\r\n            \r\n            request.type = params.type;\r\n\r\n            var service = new google.maps.places.PlacesService(this.map);\r\n            service.nearbySearch(request, this.onresults.bind(this));\r\n        },\r\n\r\n        search: function(params) {\r\n            var request = {};\r\n\r\n            this.clearMarkers();\r\n\r\n            if (params.latitude != null && params.longitude != null) {\r\n                request.location = { lat: +params.latitude, lng: +params.longitude };\r\n                request.radius = +params.radius || 500;\r\n            } else {\r\n                request.bounds = this.map.getBounds();\r\n            }\r\n\r\n            if (params.openNow) {\r\n                request.openNow = params.openNow;\r\n            }\r\n\r\n            if (params.type) {\r\n                request.type = params.type;\r\n            }\r\n\r\n            request.query = params.query;\r\n\r\n            var service = new google.maps.places.PlacesService(this.map);\r\n            service.textSearch(request, this.onresults.bind(this));\r\n        },\r\n\r\n        getMore: function() {\r\n            if (this.pagination && this.pagination.hasNextPage) {\r\n                this.pagination.nextPage();\r\n            }\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.markers = [];\r\n        this.target = document.getElementById(this.props.map);\r\n        this.map = this.target && this.target.dmxComponent && this.target.dmxComponent.map;\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.props.map && !this.map) {\r\n            this.map = this.target && this.target.dmxComponent && this.target.dmxComponent.map;\r\n        }\r\n    },\r\n\r\n    clearMarkers: function() {\r\n        this.markers.forEach(function(marker) {\r\n            // remove from map\r\n            marker.setMap(null);\r\n        });\r\n\r\n        this.markers = [];\r\n    },\r\n\r\n    onresults: function(results, status, pagination) {\r\n        this.set('status', status);\r\n        this.set('hasMore', !!(pagination && pagination.hasNextPage));\r\n\r\n        this.pagination = pagination;\r\n\r\n        if (status == 'OK') {\r\n            this.set('results', results.map(function(place) {\r\n                return {\r\n                    placeId: place.place_id,\r\n                    address: place.formatted_address,\r\n                    latitude: place.geometry.location.lat(),\r\n                    longitude: place.geometry.location.lng(),\r\n                    icon: place.icon,\r\n                    name: place.name,\r\n                    types: place.types\r\n                }\r\n            }));\r\n\r\n            if (this.props['show-on-map']) {\r\n                // create markers on map\r\n                results.forEach(function(place) {\r\n                    var image = {\r\n                        url: place.icon,\r\n                        size: new google.maps.Size(71, 71),\r\n                        origin: new google.maps.Point(0, 0),\r\n                        anchor: new google.maps.Point(17, 34),\r\n                        scaledSize: new google.maps.Size(25, 25)\r\n                    };\r\n\r\n                    var marker = new google.maps.Marker({\r\n                        map: this.map,\r\n                        icon: image,\r\n                        title: place.name,\r\n                        position: place.geometry.location\r\n                    });\r\n\r\n                    this.markers.push(marker);\r\n                }, this);\r\n            }\r\n        } else {\r\n            console.warn('Places search failed.', status);\r\n        }\r\n    }\r\n\r\n});\r\n"]}